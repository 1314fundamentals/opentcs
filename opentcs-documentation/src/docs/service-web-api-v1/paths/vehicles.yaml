# SPDX-FileCopyrightText: The openTCS Authors
# SPDX-License-Identifier: CC-BY-4.0

paths:
  /vehicles:
    get:
      tags:
        - Vehicles
      summary: Retrieves a set of vehicles.
      description: ""
      parameters:
        - name: procState
          in: query
          description: The processing state of the vehicles to be retrieved.
          example: IDLE
          required: false
          schema:
            type: string
            default: null
            enum:
              - IDLE
              - AWAITING_ORDER
              - PROCESSING_ORDER
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                title: ArrayOfVehicles
                type: array
                items:
                  $ref: "#/components/schemas/VehicleState"
        "400":
          description: The submitted data is invalid.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Details on the actual error.
                  example: Could not parse input.
  "/vehicles/{NAME}":
    get:
      tags:
        - Vehicles
      summary: Retrieves the vehicle with the given name.
      description: ""
      parameters:
        - name: NAME
          in: path
          description: The name of the vehicle to be retrieved.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VehicleState"
        "404":
          description: Referencing object that could not be found.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Details on the actual error.
                  example: Could not find vehicle 'Vehicle-0001'.
  "/vehicles/{NAME}/withdrawal":
    post:
      tags:
        - Vehicles
      summary: Withdraws a transport order processed by the vehicle with the given name.
      description: ""
      parameters:
        - name: NAME
          in: path
          description: Name of the vehicle processing the transport order to be withdrawn
          required: true
          schema:
            type: string
        - name: immediate
          in: query
          description: Whether the transport order should be aborted as quickly as possible.
          required: false
          schema:
            type: boolean
            default: false
        - name: disableVehicle
          in: query
          description: Deprecated, explicitly set the vehicle's integration level, instead.
          required: false
          deprecated: true
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Successful operation
        "404":
          description: Referencing object that could not be found.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Details on the actual error.
                  example: Could not find vehicle 'Vehicle-0001'.
  "/vehicles/{NAME}/rerouteRequest":
    post:
      tags:
        - Vehicles
      summary: Reroutes a vehicle with the given name.
      description: ""
      parameters:
        - name: NAME
          in: path
          description: Name of the vehicle to be rerouted
          required: true
          schema:
            type: string
        - name: forced
          in: query
          description: |
            Whether the vehicle should be rerouted even if it's not where it is expected to be.

            Forced rerouting of a vehicle from its current position can disrupt traffic management if used inappropriately.
            Only do this if you are sure it is necessary and safe, and only if the vehicle is not moving!
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Successful operation
        "404":
          description: Referencing object that could not be found.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Details on the actual error.
                  example: Could not find vehicle 'Vehicle-0001'.
  "/vehicles/{NAME}/integrationLevel":
    put:
      tags:
        - Vehicles
      summary: Sets a new integration level for the named vehicle.
      description: ""
      parameters:
        - name: NAME
          in: path
          description: The name of the vehicle.
          required: true
          schema:
            type: string
        - name: newValue
          in: query
          description: The vehicle's new integration level.
          required: true
          example: TO_BE_RESPECTED
          schema:
            type: string
            enum:
              - TO_BE_UTILIZED
              - TO_BE_RESPECTED
              - TO_BE_NOTICED
              - TO_BE_IGNORED
      responses:
        "200":
          description: Successful operation
        "404":
          description: Referencing object that could not be found.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Details on the actual error.
                  example: Could not find vehicle 'Vehicle-0001'.
  "/vehicles/{NAME}/paused":
    put:
      tags:
        - Vehicles
      summary: Sets the paused state for the named vehicle.
      description: ""
      parameters:
        - name: NAME
          in: path
          description: The name of the vehicle.
          required: true
          schema:
            type: string
        - name: newValue
          in: query
          description: The vehicle's new paused state.
          required: true
          example: true
          schema:
            type: boolean
      responses:
        "200":
          description: Successful operation
        "404":
          description: Referencing object that could not be found.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Details on the actual error.
                  example: Could not find vehicle 'Vehicle-0001'.
  "/vehicles/{NAME}/allowedOrderTypes":
    put:
      deprecated: true
      tags:
        - Vehicles
      summary: Sets the allowed order types for the named vehicle.
      description: Deprecated - Use `PUT /vehicles/{NAME}/acceptableOrderTypes` instead.
      parameters:
        - name: NAME
          in: path
          description: The name of the vehicle.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AllowedOrderTypes"
        description: The list of all order types to be allowed.
      responses:
        "200":
          description: Successful operation
        "400":
          description: The submitted data is invalid.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Details on the actual error.
                  example: Could not parse JSON input.
        "404":
          description: Referencing object that could not be found.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Details on the actual error.
                  example: Could not find vehicle 'Vehicle-0001'.
  "/vehicles/{NAME}/acceptableOrderTypes":
    put:
      tags:
        - Vehicles
      summary: Sets the acceptable order types for the named vehicle.
      parameters:
        - name: NAME
          in: path
          description: The name of the vehicle.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AcceptableOrderTypes"
        description: The list of all acceptable order types with priorities.
      responses:
        "200":
          description: Successful operation
        "400":
          description: The submitted data is invalid.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Details on the actual error.
                  example: Could not parse JSON input.
        "404":
          description: Referencing object that could not be found.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Details on the actual error.
                  example: Could not find vehicle 'Vehicle-0001'.
  "/vehicles/{NAME}/energyLevelThresholdSet":
    put:
      tags:
        - Vehicles
      summary: Sets energy level threshold values for the named vehicle (in percent).
      parameters:
        - name: NAME
          in: path
          description: The name of the vehicle.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnergyLevelThresholdSet"
        description: The new set of energy level thresholds.
      responses:
        "200":
          description: Successful operation
        "400":
          description: The submitted data is invalid.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Details on the actual error.
                  example: Could not parse JSON input.
        "404":
          description: Referencing object that could not be found.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Details on the actual error.
                  example: Could not find vehicle 'Vehicle-0001'.
  "/vehicles/{NAME}/commAdapter/attachmentInformation":
    get:
      tags:
        - Vehicles
      summary: Retrieves the driver attachment information of this vehicle.
      description: ""
      parameters:
        - name: NAME
          in: path
          description: The name of the vehicle.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttachmentInformation"
        "404":
          description: Referencing object that could not be found.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Details on the actual error.
                  example: Could not find vehicle 'Vehicle-0001'.
  "/vehicles/{NAME}/commAdapter/attachment":
    put:
      tags:
        - Vehicles
      summary: Attaches the given vehicle driver to this vehicle.
      description: ""
      parameters:
        - name: NAME
          in: path
          description: The name of the vehicle.
          required: true
          schema:
            type: string
        - name: newValue
          in: query
          description: The description class name of the vehicle driver that is to be attached.
          required: true
          example: org.opentcs.virtualvehicle.LoopbackCommunicationAdapterDescription
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "404":
          description: Referencing object that could not be found.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Details on the actual error.
                  example: Could not find vehicle 'Vehicle-0001'.
        "400":
          description: The submitted value is invalid.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Details on the actual error.
                  example: "Unknown vehicle driver class name: org.opentcs.someVehicle.driver11"
  "/vehicles/{NAME}/commAdapter/enabled":
    put:
      tags:
        - Vehicles
      summary: Sets the enabled state for the named vehicle's driver.
      description: ""
      parameters:
        - name: NAME
          in: path
          description: The name of the vehicle.
          required: true
          schema:
            type: string
        - name: newValue
          in: query
          description: The vehicle driver's new enabled state.
          required: true
          example: true
          schema:
            type: boolean
      responses:
        "200":
          description: Successful operation
        "404":
          description: Referencing object that could not be found.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Details on the actual error.
                  example: Could not find vehicle 'Vehicle-0001'.
  "/vehicles/{NAME}/routeComputationQuery":
    post:
      tags:
        - Vehicles
      summary: Computes routes for the named vehicle to the given destination points.
      parameters:
        - name: NAME
          in: path
          description: The name of the vehicle.
          required: true
          schema:
            type: string
        - name: maxRoutesPerDestinationPoint
          in: query
          description: The maximum number of routes to compute for one destination point.
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoutesRequest"
        description: The destination points, optional source point and optional list of resources to avoid for the routes to be computed.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoutesResponse"
        "400":
          description: The submitted request body is invalid.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Details on the actual error.
                  example: Could not parse JSON input.
        "404":
          description: Referencing object that could not be found.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Details on the actual error.
                  example: "Unknown source point: Point-X"
  "/vehicles/{NAME}/envelopeKey":
    put:
      tags:
        - Vehicles
      summary: Sets the envelope key for this vehicle.
      description: ""
      parameters:
        - name: NAME
          in: path
          description: The name of the vehicle.
          required: true
          schema:
            type: string
        - name: newValue
          in: query
          description: The vehicle's new envelope key.
          required: false
          example: envelopeType-01
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "404":
          description: Referencing object that could not be found.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Details on the actual error.
                  example: Could not find vehicle 'Vehicle-0001'.
  /vehicles/dispatcher/trigger:
    post:
      tags:
        - Vehicles
      summary: Explicitly triggers dispatching of vehicles / transport orders.
      description: >-
        Triggers the kernel's dispatcher to assign vehicles to transport orders.
        This usually happens automatically, but depending on the kernel configuration, explicitly triggering it may be necessary.
      responses:
        "200":
          description: Successful response
components:
  schemas:
    VehicleState:
      title: Vehicle State
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          description: The name of the vehicle
          example: Vehicle-0001
        properties:
          type: object
          additionalProperties:
            type: string
          description: A set of properties (key-value pairs) associated with this object.
        length:
          type: integer
          description: The vehicle's length (in mm).
          example: 1000
          deprecated: true
        boundingBox:
          $ref: "../schemas/common.yaml#/components/schemas/BoundingBox"
        energyLevelGood:
          type: integer
          description: The value (in %) at/above which the vehicle's energy level is considered
            'good'.
          example: 90
        energyLevelCritical:
          type: integer
          description: The value (in %) at/below which the vehicle's energy level is considered
            'critical'.
          example: 30
        energyLevelSufficientlyRecharged:
          type: integer
          description: The value (in %) at/below which the vehicle's energy level is considered
            'sufficiently recharged'.
          example: 30
        energyLevelFullyRecharged:
          type: integer
          description: The value (in %) at/below which the vehicle's energy level is considered
            'fully recharged'.
          example: 90
        energyLevel:
          type: integer
          description: The vehicle's remaining energy (in %).
          example: 60
        integrationLevel:
          type: string
          enum:
            - TO_BE_IGNORED
            - TO_BE_NOTICED
            - TO_BE_RESPECTED
            - TO_BE_UTILIZED
          description: The vehicle's integration level.
        paused:
          type: boolean
          description: Whether the vehicle is paused.
          example: false
        procState:
          type: string
          enum:
            - UNAVAILABLE
            - IDLE
            - AWAITING_ORDER
            - PROCESSING_ORDER
          description: The vehicle's current processing state.
        procStateTimestamp:
          type: string
          format: date-time
          description: The time at which the vehicle has entered its current state (expressed according to ISO 8601).
          example: 2018-05-14T07:42:00.343Z
        transportOrder:
          type: string
          description: The name of the transport order the vehicle is currently processing.
          example: TOrder-01
        currentPosition:
          type: string
          description: The name of the point which the vehicle currently occupies.
          example: Point-0001
        precisePosition:
          $ref: "../schemas/common.yaml#/components/schemas/PrecisePosition"
        orientationAngle:
          oneOf:
            - type: string
            - type: number
              format: double
          description: >-
            The vehicle's current orientation angle (-360..360).
            May be a string ("NaN") if the vehicle hasn't provided an orientation angle.
          example: 90.0
        state:
          type: string
          enum:
            - UNKNOWN
            - UNAVAILABLE
            - ERROR
            - IDLE
            - EXECUTING
            - CHARGING
          description: The vehicle's current state.
        stateTimestamp:
          type: string
          format: date-time
          description: The time at which the vehicle has entered its current processing state (expressed according to ISO 8601).
          example: 2018-05-14T07:42:00.343Z
        allocatedResources:
          type: array
          items:
            $ref: "../schemas/common.yaml#/components/schemas/ResourceSet"
          description: The resources already allocated by the vehicle.
          example: [ [ "Path-0039--0040", "Point-0040" ], [ "Path-0040--0041", "Point-0041" ] ]
        claimedResources:
          type: array
          items:
            $ref: "../schemas/common.yaml#/components/schemas/ResourceSet"
          description: The resources claimed - i.e. not yet allocated - for the vehicle's route.
          example: [ [ "Path-0041--0042", "Point-0042" ], [ "Path-0042--0043", "Point-0043", "Location-2345" ] ]
        allowedOrderTypes:
          type: array
          items:
            type: string
            description: The allowed order types for this vehicle.
          example: [ "OrderType001", "OrderType002" ]
        envelopeKey:
          type: string
          description: The envelope key for this vehicle.
          example: envelopeType-01
      required:
        - name
        - properties
        - length
        - boundingBox
        - energyLevelGood
        - energyLevelCritical
        - energyLevelSufficientlyRecharged
        - energyLevelFullyRecharged
        - energyLevel
        - integrationLevel
        - paused
        - procState
        - procStateTimestamp
        - orientationAngle
        - state
        - stateTimestamp
        - allocatedResources
        - claimedResources
        - allowedOrderTypes
    AllowedOrderTypes:
      title: Allowed Order Types
      type: object
      properties:
        orderTypes:
          type: array
          items:
            type: string
            description: The names of the allowed order types.
          example: [ "Park", "Load cargo", "Unload cargo" ]
      required:
        - orderTypes
    AcceptableOrderTypes:
      title: Acceptable Order Types
      type: object
      properties:
        acceptableOrderTypes:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: The name of the order type.
              priority:
                type: integer
                description: The priority of the order type, with a lower value indicating a higher priority.
            required:
              - name
              - priority
          example: [ { "name": "Park", "priority": 0 }, { "name": "Load cargo", "priority": 0 }, { "name": "Unload cargo", "priority": 0 } ]
      required:
        - acceptableOrderTypes
    EnergyLevelThresholdSet:
      title: Energy Level Threshold Set
      type: object
      properties:
        energyLevelCritical:
          description: The energy level value (in %) at/below which the vehicle _must_ be recharged.
          type: integer
          minimum: 0
          maximum: 100
          example: 15
        energyLevelGood:
          description: The energy level value (in %) at/above which the vehicle _should not_ be recharged.
          type: integer
          minimum: 0
          maximum: 100
          example: 60
        energyLevelSufficientlyRecharged:
          description: The energy level value (in %) at/above which the vehicle is considered sufficiently recharged, i.e. _may_ stop recharging.
          type: integer
          minimum: 0
          maximum: 100
          example: 50
        energyLevelFullyRecharged:
          description: The energy level value (in %) at/above which the vehicle is considered fully recharged, i.e. _should_ stop recharging.
          type: integer
          minimum: 0
          maximum: 100
          example: 90
      required:
        - energyLevelCritical
        - energyLevelGood
        - energyLevelSufficientlyRecharged
        - energyLevelFullyRecharged
    AttachmentInformation:
      title: Attachment Information
      type: object
      additionalProperties: false
      properties:
        vehicleName:
          type: string
          description: The name of the vehicle.
          example: Vehicle-0001
        availableCommAdapters:
          type: array
          items:
            type: string
          description: The list of drivers (as names of description classes) available for this vehicle.
          example: [ "org.opentcs.someVehicle.driver001", "org.opentcs.someVehicle.driver002" ]
        attachedCommAdapter:
          type: string
          description: The description class name of the vehicle driver currently attached to this vehicle.
          example: org.opentcs.someVehicle.driver001
      required:
        - vehicleName
        - availableCommAdapters
        - attachedCommAdapter
    RoutesRequest:
      title: Requested routes
      type: object
      properties:
        sourcePoint:
          type: string
          description: >-
            The (optional) starting point for route computation.
            If `null` or not set, the vehicle's current position will be used.
          example: Point-A
        destinationPoints:
          type: array
          description: The destination point for each route to be computed.
          items:
            type: string
          example:
            - Point-C
            - Point-D
            - Point-E
        resourcesToAvoid:
          type: array
          description: The resources to be avoided for each route.
          items:
            type: string
          example:
            - Path-CA
            - Point-B
      required:
        - destinationPoints
    RoutesResponse:
      title: Computed routes for different destination points.
      type: object
      properties:
        routes:
          type: array
          description: The list of computed routes.
          items:
            $ref: "#/components/schemas/Route"
      required:
        - Routes
      example:
        routes:
          - destinationPoint: Point-C
            costs: 77644
            steps:
              - path: Point-A --- Point-B
                sourcePoint: Point-A
                destinationPoint: Point-B
                vehicleOrientation: FORWARD
              - path: Point-B --- Point-C
                sourcePoint: Point-B
                destinationPoint: Point-C
                vehicleOrientation: FORWARD
          - destinationPoint: Point-D
            costs: -1
            steps: null
          - destinationPoint: Point-E
            costs: 67934
            steps:
              - path: Point-A --- Point-D
                sourcePoint: Point-A
                destinationPoint: Point-D
                vehicleOrientation: FORWARD
              - path: Point-D --- Point-E
                sourcePoint: Point-D
                destinationPoint: Point-E
                vehicleOrientation: BACKWARD
    Route:
      title: Route
      type: object
      properties:
        destinationPoint:
          type: string
          description: The computed route's destination point.
          example: Point-A
        costs:
          type: integer
          format: int64
          description: The costs for the computed route, or `-1`, if no route could be computed.
          example: 33475
        steps:
          type: array
          description: >-
            An array containing the computed route's steps, or `null`, if no route could be
            computed.
          items:
            $ref: "#/components/schemas/Step"
      required:
        - destinationPoint
        - costs
        - steps
    Step:
      title: Single step of a route
      type: object
      properties:
        path:
          type: string
          description: The path to travel for this step.
          example: Point-A --- Point-B
        sourcePoint:
          type: string
          description: The source point for this step.
          example: Point-A
        destinationPoint:
          type: string
          description: The destination point for this step.
          example: Point-B
        vehicleOrientation:
          type: string
          default: UNDEFINED
          enum:
            - FORWARD
            - BACKWARD
            - UNDEFINED
      required:
        - destinationPoint
        - vehicleOrientation
